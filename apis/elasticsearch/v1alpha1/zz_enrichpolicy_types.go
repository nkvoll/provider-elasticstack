/*
Copyright Elasticsearch B.V. All rights reserved.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnrichPolicyElasticsearchConnectionInitParameters struct {

	// (String, Sensitive) API Key to use for authentication to Elasticsearch
	// API Key to use for authentication to Elasticsearch
	APIKeySecretRef *v1.SecretKeySelector `json:"apiKeySecretRef,omitempty" tf:"-"`

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	Endpoints []*string `json:"endpointsSecretRef,omitempty" tf:"-"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String, Sensitive) PEM encoded private key for client auth
	// PEM encoded private key for client auth
	KeyDataSecretRef *v1.SecretKeySelector `json:"keyDataSecretRef,omitempty" tf:"-"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String, Sensitive) Password to use for API authentication to Elasticsearch.
	// Password to use for API authentication to Elasticsearch.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type EnrichPolicyElasticsearchConnectionObservation struct {

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type EnrichPolicyElasticsearchConnectionParameters struct {

	// (String, Sensitive) API Key to use for authentication to Elasticsearch
	// API Key to use for authentication to Elasticsearch
	// +kubebuilder:validation:Optional
	APIKeySecretRef *v1.SecretKeySelector `json:"apiKeySecretRef,omitempty" tf:"-"`

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointsSecretRef *[]v1.SecretKeySelector `json:"endpointsSecretRef,omitempty" tf:"-"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String, Sensitive) PEM encoded private key for client auth
	// PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyDataSecretRef *v1.SecretKeySelector `json:"keyDataSecretRef,omitempty" tf:"-"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String, Sensitive) Password to use for API authentication to Elasticsearch.
	// Password to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type EnrichPolicyInitParameters struct {

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []EnrichPolicyElasticsearchConnectionInitParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Set of String) Fields to add to matching incoming documents. These fields must be present in the source indices.
	// Fields to add to matching incoming documents. These fields must be present in the source indices.
	// +listType=set
	EnrichFields []*string `json:"enrichFields,omitempty" tf:"enrich_fields,omitempty"`

	// (Boolean) Whether to call the execute API function in order to create the enrich index.
	// Whether to call the execute API function in order to create the enrich index.
	Execute *bool `json:"execute,omitempty" tf:"execute,omitempty"`

	// (Set of String) Array of one or more source indices used to create the enrich index.
	// Array of one or more source indices used to create the enrich index.
	// +listType=set
	Indices []*string `json:"indices,omitempty" tf:"indices,omitempty"`

	// (String) Field in source indices used to match incoming documents.
	// Field in source indices used to match incoming documents.
	MatchField *string `json:"matchField,omitempty" tf:"match_field,omitempty"`

	// (String) Name of the enrich policy to manage.
	// Name of the enrich policy to manage.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of enrich policy, can be one of geo_match, match, range.
	// The type of enrich policy, can be one of geo_match, match, range.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// (String) Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich incoming documents. Defaults to a match_all query.
	// Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich incoming documents. Defaults to a match_all query.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type EnrichPolicyObservation struct {

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []EnrichPolicyElasticsearchConnectionObservation `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Set of String) Fields to add to matching incoming documents. These fields must be present in the source indices.
	// Fields to add to matching incoming documents. These fields must be present in the source indices.
	// +listType=set
	EnrichFields []*string `json:"enrichFields,omitempty" tf:"enrich_fields,omitempty"`

	// (Boolean) Whether to call the execute API function in order to create the enrich index.
	// Whether to call the execute API function in order to create the enrich index.
	Execute *bool `json:"execute,omitempty" tf:"execute,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) Array of one or more source indices used to create the enrich index.
	// Array of one or more source indices used to create the enrich index.
	// +listType=set
	Indices []*string `json:"indices,omitempty" tf:"indices,omitempty"`

	// (String) Field in source indices used to match incoming documents.
	// Field in source indices used to match incoming documents.
	MatchField *string `json:"matchField,omitempty" tf:"match_field,omitempty"`

	// (String) Name of the enrich policy to manage.
	// Name of the enrich policy to manage.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of enrich policy, can be one of geo_match, match, range.
	// The type of enrich policy, can be one of geo_match, match, range.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// (String) Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich incoming documents. Defaults to a match_all query.
	// Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich incoming documents. Defaults to a match_all query.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type EnrichPolicyParameters struct {

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	// +kubebuilder:validation:Optional
	ElasticsearchConnection []EnrichPolicyElasticsearchConnectionParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Set of String) Fields to add to matching incoming documents. These fields must be present in the source indices.
	// Fields to add to matching incoming documents. These fields must be present in the source indices.
	// +kubebuilder:validation:Optional
	// +listType=set
	EnrichFields []*string `json:"enrichFields,omitempty" tf:"enrich_fields,omitempty"`

	// (Boolean) Whether to call the execute API function in order to create the enrich index.
	// Whether to call the execute API function in order to create the enrich index.
	// +kubebuilder:validation:Optional
	Execute *bool `json:"execute,omitempty" tf:"execute,omitempty"`

	// (Set of String) Array of one or more source indices used to create the enrich index.
	// Array of one or more source indices used to create the enrich index.
	// +kubebuilder:validation:Optional
	// +listType=set
	Indices []*string `json:"indices,omitempty" tf:"indices,omitempty"`

	// (String) Field in source indices used to match incoming documents.
	// Field in source indices used to match incoming documents.
	// +kubebuilder:validation:Optional
	MatchField *string `json:"matchField,omitempty" tf:"match_field,omitempty"`

	// (String) Name of the enrich policy to manage.
	// Name of the enrich policy to manage.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of enrich policy, can be one of geo_match, match, range.
	// The type of enrich policy, can be one of geo_match, match, range.
	// +kubebuilder:validation:Optional
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// (String) Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich incoming documents. Defaults to a match_all query.
	// Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich incoming documents. Defaults to a match_all query.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

// EnrichPolicySpec defines the desired state of EnrichPolicy
type EnrichPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnrichPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnrichPolicyInitParameters `json:"initProvider,omitempty"`
}

// EnrichPolicyStatus defines the observed state of EnrichPolicy.
type EnrichPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnrichPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnrichPolicy is the Schema for the EnrichPolicys API. Managing Elasticsearch enrich policies, see: https://www.elastic.co/guide/en/elasticsearch/reference/current/enrich-apis.html
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticstack}
type EnrichPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enrichFields) || (has(self.initProvider) && has(self.initProvider.enrichFields))",message="spec.forProvider.enrichFields is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.indices) || (has(self.initProvider) && has(self.initProvider.indices))",message="spec.forProvider.indices is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.matchField) || (has(self.initProvider) && has(self.initProvider.matchField))",message="spec.forProvider.matchField is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyType) || (has(self.initProvider) && has(self.initProvider.policyType))",message="spec.forProvider.policyType is a required parameter"
	Spec   EnrichPolicySpec   `json:"spec"`
	Status EnrichPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnrichPolicyList contains a list of EnrichPolicys
type EnrichPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnrichPolicy `json:"items"`
}

// Repository type metadata.
var (
	EnrichPolicy_Kind             = "EnrichPolicy"
	EnrichPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnrichPolicy_Kind}.String()
	EnrichPolicy_KindAPIVersion   = EnrichPolicy_Kind + "." + CRDGroupVersion.String()
	EnrichPolicy_GroupVersionKind = CRDGroupVersion.WithKind(EnrichPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&EnrichPolicy{}, &EnrichPolicyList{})
}
