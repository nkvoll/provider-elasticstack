/*
Copyright Elasticsearch B.V. All rights reserved.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ClusterSettings
func (mg *ClusterSettings) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_cluster_settings"
}

// GetConnectionDetailsMapping for this ClusterSettings
func (tr *ClusterSettings) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this ClusterSettings
func (tr *ClusterSettings) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClusterSettings
func (tr *ClusterSettings) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClusterSettings
func (tr *ClusterSettings) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClusterSettings
func (tr *ClusterSettings) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClusterSettings
func (tr *ClusterSettings) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ClusterSettings
func (tr *ClusterSettings) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ClusterSettings using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClusterSettings) LateInitialize(attrs []byte) (bool, error) {
	params := &ClusterSettingsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClusterSettings) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ComponentTemplate
func (mg *ComponentTemplate) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_component_template"
}

// GetConnectionDetailsMapping for this ComponentTemplate
func (tr *ComponentTemplate) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this ComponentTemplate
func (tr *ComponentTemplate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ComponentTemplate
func (tr *ComponentTemplate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ComponentTemplate
func (tr *ComponentTemplate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ComponentTemplate
func (tr *ComponentTemplate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ComponentTemplate
func (tr *ComponentTemplate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ComponentTemplate
func (tr *ComponentTemplate) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ComponentTemplate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ComponentTemplate) LateInitialize(attrs []byte) (bool, error) {
	params := &ComponentTemplateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ComponentTemplate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataStream
func (mg *DataStream) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_data_stream"
}

// GetConnectionDetailsMapping for this DataStream
func (tr *DataStream) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this DataStream
func (tr *DataStream) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataStream
func (tr *DataStream) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataStream
func (tr *DataStream) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataStream
func (tr *DataStream) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataStream
func (tr *DataStream) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DataStream
func (tr *DataStream) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DataStream using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataStream) LateInitialize(attrs []byte) (bool, error) {
	params := &DataStreamParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataStream) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this EnrichPolicy
func (mg *EnrichPolicy) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_enrich_policy"
}

// GetConnectionDetailsMapping for this EnrichPolicy
func (tr *EnrichPolicy) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this EnrichPolicy
func (tr *EnrichPolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EnrichPolicy
func (tr *EnrichPolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EnrichPolicy
func (tr *EnrichPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EnrichPolicy
func (tr *EnrichPolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EnrichPolicy
func (tr *EnrichPolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this EnrichPolicy
func (tr *EnrichPolicy) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this EnrichPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EnrichPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &EnrichPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EnrichPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Index
func (mg *Index) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_index"
}

// GetConnectionDetailsMapping for this Index
func (tr *Index) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this Index
func (tr *Index) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Index
func (tr *Index) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Index
func (tr *Index) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Index
func (tr *Index) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Index
func (tr *Index) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this Index
func (tr *Index) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this Index using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Index) LateInitialize(attrs []byte) (bool, error) {
	params := &IndexParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Index) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IndexLifecycle
func (mg *IndexLifecycle) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_index_lifecycle"
}

// GetConnectionDetailsMapping for this IndexLifecycle
func (tr *IndexLifecycle) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this IndexLifecycle
func (tr *IndexLifecycle) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IndexLifecycle
func (tr *IndexLifecycle) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IndexLifecycle
func (tr *IndexLifecycle) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IndexLifecycle
func (tr *IndexLifecycle) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IndexLifecycle
func (tr *IndexLifecycle) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this IndexLifecycle
func (tr *IndexLifecycle) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this IndexLifecycle using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IndexLifecycle) LateInitialize(attrs []byte) (bool, error) {
	params := &IndexLifecycleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IndexLifecycle) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IndexTemplate
func (mg *IndexTemplate) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_index_template"
}

// GetConnectionDetailsMapping for this IndexTemplate
func (tr *IndexTemplate) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this IndexTemplate
func (tr *IndexTemplate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IndexTemplate
func (tr *IndexTemplate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IndexTemplate
func (tr *IndexTemplate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IndexTemplate
func (tr *IndexTemplate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IndexTemplate
func (tr *IndexTemplate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this IndexTemplate
func (tr *IndexTemplate) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this IndexTemplate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IndexTemplate) LateInitialize(attrs []byte) (bool, error) {
	params := &IndexTemplateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IndexTemplate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IngestPipeline
func (mg *IngestPipeline) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_ingest_pipeline"
}

// GetConnectionDetailsMapping for this IngestPipeline
func (tr *IngestPipeline) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this IngestPipeline
func (tr *IngestPipeline) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IngestPipeline
func (tr *IngestPipeline) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IngestPipeline
func (tr *IngestPipeline) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IngestPipeline
func (tr *IngestPipeline) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IngestPipeline
func (tr *IngestPipeline) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this IngestPipeline
func (tr *IngestPipeline) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this IngestPipeline using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IngestPipeline) LateInitialize(attrs []byte) (bool, error) {
	params := &IngestPipelineParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IngestPipeline) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogstashPipeline
func (mg *LogstashPipeline) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_logstash_pipeline"
}

// GetConnectionDetailsMapping for this LogstashPipeline
func (tr *LogstashPipeline) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this LogstashPipeline
func (tr *LogstashPipeline) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogstashPipeline
func (tr *LogstashPipeline) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogstashPipeline
func (tr *LogstashPipeline) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogstashPipeline
func (tr *LogstashPipeline) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogstashPipeline
func (tr *LogstashPipeline) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this LogstashPipeline
func (tr *LogstashPipeline) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this LogstashPipeline using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogstashPipeline) LateInitialize(attrs []byte) (bool, error) {
	params := &LogstashPipelineParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogstashPipeline) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Script
func (mg *Script) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_script"
}

// GetConnectionDetailsMapping for this Script
func (tr *Script) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this Script
func (tr *Script) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Script
func (tr *Script) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Script
func (tr *Script) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Script
func (tr *Script) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Script
func (tr *Script) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this Script
func (tr *Script) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this Script using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Script) LateInitialize(attrs []byte) (bool, error) {
	params := &ScriptParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Script) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecurityAPIKey
func (mg *SecurityAPIKey) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_security_api_key"
}

// GetConnectionDetailsMapping for this SecurityAPIKey
func (tr *SecurityAPIKey) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"api_key": "status.atProvider.apiKey", "elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef", "encoded": "status.atProvider.encoded"}
}

// GetObservation of this SecurityAPIKey
func (tr *SecurityAPIKey) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecurityAPIKey
func (tr *SecurityAPIKey) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecurityAPIKey
func (tr *SecurityAPIKey) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecurityAPIKey
func (tr *SecurityAPIKey) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecurityAPIKey
func (tr *SecurityAPIKey) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecurityAPIKey
func (tr *SecurityAPIKey) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecurityAPIKey using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecurityAPIKey) LateInitialize(attrs []byte) (bool, error) {
	params := &SecurityAPIKeyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecurityAPIKey) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecurityRole
func (mg *SecurityRole) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_security_role"
}

// GetConnectionDetailsMapping for this SecurityRole
func (tr *SecurityRole) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this SecurityRole
func (tr *SecurityRole) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecurityRole
func (tr *SecurityRole) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecurityRole
func (tr *SecurityRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecurityRole
func (tr *SecurityRole) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecurityRole
func (tr *SecurityRole) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecurityRole
func (tr *SecurityRole) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecurityRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecurityRole) LateInitialize(attrs []byte) (bool, error) {
	params := &SecurityRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecurityRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecurityRoleMapping
func (mg *SecurityRoleMapping) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_security_role_mapping"
}

// GetConnectionDetailsMapping for this SecurityRoleMapping
func (tr *SecurityRoleMapping) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this SecurityRoleMapping
func (tr *SecurityRoleMapping) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecurityRoleMapping
func (tr *SecurityRoleMapping) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecurityRoleMapping
func (tr *SecurityRoleMapping) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecurityRoleMapping
func (tr *SecurityRoleMapping) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecurityRoleMapping
func (tr *SecurityRoleMapping) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecurityRoleMapping
func (tr *SecurityRoleMapping) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecurityRoleMapping using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecurityRoleMapping) LateInitialize(attrs []byte) (bool, error) {
	params := &SecurityRoleMappingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecurityRoleMapping) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecuritySystemUser
func (mg *SecuritySystemUser) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_security_system_user"
}

// GetConnectionDetailsMapping for this SecuritySystemUser
func (tr *SecuritySystemUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef", "password": "spec.forProvider.passwordSecretRef", "password_hash": "spec.forProvider.passwordHashSecretRef"}
}

// GetObservation of this SecuritySystemUser
func (tr *SecuritySystemUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecuritySystemUser
func (tr *SecuritySystemUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecuritySystemUser
func (tr *SecuritySystemUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecuritySystemUser
func (tr *SecuritySystemUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecuritySystemUser
func (tr *SecuritySystemUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecuritySystemUser
func (tr *SecuritySystemUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecuritySystemUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecuritySystemUser) LateInitialize(attrs []byte) (bool, error) {
	params := &SecuritySystemUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecuritySystemUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecurityUser
func (mg *SecurityUser) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_security_user"
}

// GetConnectionDetailsMapping for this SecurityUser
func (tr *SecurityUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef", "password": "spec.forProvider.passwordSecretRef", "password_hash": "spec.forProvider.passwordHashSecretRef"}
}

// GetObservation of this SecurityUser
func (tr *SecurityUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecurityUser
func (tr *SecurityUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecurityUser
func (tr *SecurityUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecurityUser
func (tr *SecurityUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecurityUser
func (tr *SecurityUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecurityUser
func (tr *SecurityUser) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecurityUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecurityUser) LateInitialize(attrs []byte) (bool, error) {
	params := &SecurityUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecurityUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SnapshotLifecycle
func (mg *SnapshotLifecycle) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_snapshot_lifecycle"
}

// GetConnectionDetailsMapping for this SnapshotLifecycle
func (tr *SnapshotLifecycle) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this SnapshotLifecycle
func (tr *SnapshotLifecycle) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SnapshotLifecycle
func (tr *SnapshotLifecycle) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SnapshotLifecycle
func (tr *SnapshotLifecycle) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SnapshotLifecycle
func (tr *SnapshotLifecycle) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SnapshotLifecycle
func (tr *SnapshotLifecycle) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SnapshotLifecycle
func (tr *SnapshotLifecycle) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SnapshotLifecycle using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SnapshotLifecycle) LateInitialize(attrs []byte) (bool, error) {
	params := &SnapshotLifecycleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SnapshotLifecycle) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SnapshotRepository
func (mg *SnapshotRepository) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_snapshot_repository"
}

// GetConnectionDetailsMapping for this SnapshotRepository
func (tr *SnapshotRepository) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"elasticsearch_connection[*].api_key": "spec.forProvider.elasticsearchConnection[*].apiKeySecretRef", "elasticsearch_connection[*].endpoints[*]": "spec.forProvider.elasticsearchConnection[*].endpoints[*]SecretRef", "elasticsearch_connection[*].key_data": "spec.forProvider.elasticsearchConnection[*].keyDataSecretRef", "elasticsearch_connection[*].password": "spec.forProvider.elasticsearchConnection[*].passwordSecretRef"}
}

// GetObservation of this SnapshotRepository
func (tr *SnapshotRepository) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SnapshotRepository
func (tr *SnapshotRepository) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SnapshotRepository
func (tr *SnapshotRepository) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SnapshotRepository
func (tr *SnapshotRepository) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SnapshotRepository
func (tr *SnapshotRepository) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SnapshotRepository
func (tr *SnapshotRepository) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SnapshotRepository using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SnapshotRepository) LateInitialize(attrs []byte) (bool, error) {
	params := &SnapshotRepositoryParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SnapshotRepository) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Transform
func (mg *Transform) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_transform"
}

// GetConnectionDetailsMapping for this Transform
func (tr *Transform) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Transform
func (tr *Transform) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Transform
func (tr *Transform) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Transform
func (tr *Transform) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Transform
func (tr *Transform) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Transform
func (tr *Transform) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this Transform
func (tr *Transform) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this Transform using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Transform) LateInitialize(attrs []byte) (bool, error) {
	params := &TransformParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Transform) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Watch
func (mg *Watch) GetTerraformResourceType() string {
	return "elasticstack_elasticsearch_watch"
}

// GetConnectionDetailsMapping for this Watch
func (tr *Watch) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Watch
func (tr *Watch) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Watch
func (tr *Watch) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Watch
func (tr *Watch) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Watch
func (tr *Watch) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Watch
func (tr *Watch) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this Watch
func (tr *Watch) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this Watch using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Watch) LateInitialize(attrs []byte) (bool, error) {
	params := &WatchParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Watch) GetTerraformSchemaVersion() int {
	return 0
}
