/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllocateInitParameters struct {

	// (String) Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	Exclude *string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (String) Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	Include *string `json:"include,omitempty" tf:"include,omitempty"`

	// (Number) Number of replicas to assign to the index. Default: 0
	// Number of replicas to assign to the index. Default: `0`
	NumberOfReplicas *float64 `json:"numberOfReplicas,omitempty" tf:"number_of_replicas,omitempty"`

	// (String) Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	Require *string `json:"require,omitempty" tf:"require,omitempty"`

	// 1 (unlimited). Supported from Elasticsearch version 7.16
	// The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
	TotalShardsPerNode *float64 `json:"totalShardsPerNode,omitempty" tf:"total_shards_per_node,omitempty"`
}

type AllocateObservation struct {

	// (String) Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	Exclude *string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (String) Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	Include *string `json:"include,omitempty" tf:"include,omitempty"`

	// (Number) Number of replicas to assign to the index. Default: 0
	// Number of replicas to assign to the index. Default: `0`
	NumberOfReplicas *float64 `json:"numberOfReplicas,omitempty" tf:"number_of_replicas,omitempty"`

	// (String) Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	Require *string `json:"require,omitempty" tf:"require,omitempty"`

	// 1 (unlimited). Supported from Elasticsearch version 7.16
	// The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
	TotalShardsPerNode *float64 `json:"totalShardsPerNode,omitempty" tf:"total_shards_per_node,omitempty"`
}

type AllocateParameters struct {

	// (String) Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// +kubebuilder:validation:Optional
	Exclude *string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (String) Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// +kubebuilder:validation:Optional
	Include *string `json:"include,omitempty" tf:"include,omitempty"`

	// (Number) Number of replicas to assign to the index. Default: 0
	// Number of replicas to assign to the index. Default: `0`
	// +kubebuilder:validation:Optional
	NumberOfReplicas *float64 `json:"numberOfReplicas,omitempty" tf:"number_of_replicas,omitempty"`

	// (String) Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// +kubebuilder:validation:Optional
	Require *string `json:"require,omitempty" tf:"require,omitempty"`

	// 1 (unlimited). Supported from Elasticsearch version 7.16
	// The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
	// +kubebuilder:validation:Optional
	TotalShardsPerNode *float64 `json:"totalShardsPerNode,omitempty" tf:"total_shards_per_node,omitempty"`
}

type ColdInitParameters struct {

	// (Block List, Max: 1) Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas. (see below for nested schema)
	// Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
	Allocate []AllocateInitParameters `json:"allocate,omitempty" tf:"allocate,omitempty"`

	// (Block List, Max: 1) Freeze the index to minimize its memory footprint. (see below for nested schema)
	// Freeze the index to minimize its memory footprint.
	Freeze []FreezeInitParameters `json:"freeze,omitempty" tf:"freeze,omitempty"`

	// (Block List, Max: 1) Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting. (see below for nested schema)
	// Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
	Migrate []MigrateInitParameters `json:"migrate,omitempty" tf:"migrate,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	Readonly []ReadonlyInitParameters `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	SearchableSnapshot []SearchableSnapshotInitParameters `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	SetPriority []SetPriorityInitParameters `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	Unfollow []UnfollowInitParameters `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type ColdObservation struct {

	// (Block List, Max: 1) Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas. (see below for nested schema)
	// Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
	Allocate []AllocateObservation `json:"allocate,omitempty" tf:"allocate,omitempty"`

	// (Block List, Max: 1) Freeze the index to minimize its memory footprint. (see below for nested schema)
	// Freeze the index to minimize its memory footprint.
	Freeze []FreezeObservation `json:"freeze,omitempty" tf:"freeze,omitempty"`

	// (Block List, Max: 1) Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting. (see below for nested schema)
	// Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
	Migrate []MigrateObservation `json:"migrate,omitempty" tf:"migrate,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	Readonly []ReadonlyObservation `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	SearchableSnapshot []SearchableSnapshotObservation `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	SetPriority []SetPriorityObservation `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	Unfollow []UnfollowObservation `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type ColdParameters struct {

	// (Block List, Max: 1) Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas. (see below for nested schema)
	// Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
	// +kubebuilder:validation:Optional
	Allocate []AllocateParameters `json:"allocate,omitempty" tf:"allocate,omitempty"`

	// (Block List, Max: 1) Freeze the index to minimize its memory footprint. (see below for nested schema)
	// Freeze the index to minimize its memory footprint.
	// +kubebuilder:validation:Optional
	Freeze []FreezeParameters `json:"freeze,omitempty" tf:"freeze,omitempty"`

	// (Block List, Max: 1) Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting. (see below for nested schema)
	// Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
	// +kubebuilder:validation:Optional
	Migrate []MigrateParameters `json:"migrate,omitempty" tf:"migrate,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// +kubebuilder:validation:Optional
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	// +kubebuilder:validation:Optional
	Readonly []ReadonlyParameters `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	// +kubebuilder:validation:Optional
	SearchableSnapshot []SearchableSnapshotParameters `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	// +kubebuilder:validation:Optional
	SetPriority []SetPriorityParameters `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	// +kubebuilder:validation:Optional
	Unfollow []UnfollowParameters `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type DeleteDeleteInitParameters struct {

	// (Boolean) Deletes the searchable snapshot created in a previous phase.
	// Deletes the searchable snapshot created in a previous phase.
	DeleteSearchableSnapshot *bool `json:"deleteSearchableSnapshot,omitempty" tf:"delete_searchable_snapshot,omitempty"`
}

type DeleteDeleteObservation struct {

	// (Boolean) Deletes the searchable snapshot created in a previous phase.
	// Deletes the searchable snapshot created in a previous phase.
	DeleteSearchableSnapshot *bool `json:"deleteSearchableSnapshot,omitempty" tf:"delete_searchable_snapshot,omitempty"`
}

type DeleteDeleteParameters struct {

	// (Boolean) Deletes the searchable snapshot created in a previous phase.
	// Deletes the searchable snapshot created in a previous phase.
	// +kubebuilder:validation:Optional
	DeleteSearchableSnapshot *bool `json:"deleteSearchableSnapshot,omitempty" tf:"delete_searchable_snapshot,omitempty"`
}

type DeleteInitParameters struct {

	// (Block List, Max: 1) The index is no longer needed and can safely be removed. (see below for nested schema)
	// Permanently removes the index.
	Delete []DeleteDeleteInitParameters `json:"delete,omitempty" tf:"delete,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Block List, Max: 1) Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available. (see below for nested schema)
	// Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.
	WaitForSnapshot []WaitForSnapshotInitParameters `json:"waitForSnapshot,omitempty" tf:"wait_for_snapshot,omitempty"`
}

type DeleteObservation struct {

	// (Block List, Max: 1) The index is no longer needed and can safely be removed. (see below for nested schema)
	// Permanently removes the index.
	Delete []DeleteDeleteObservation `json:"delete,omitempty" tf:"delete,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Block List, Max: 1) Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available. (see below for nested schema)
	// Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.
	WaitForSnapshot []WaitForSnapshotObservation `json:"waitForSnapshot,omitempty" tf:"wait_for_snapshot,omitempty"`
}

type DeleteParameters struct {

	// (Block List, Max: 1) The index is no longer needed and can safely be removed. (see below for nested schema)
	// Permanently removes the index.
	// +kubebuilder:validation:Optional
	Delete []DeleteDeleteParameters `json:"delete,omitempty" tf:"delete,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// +kubebuilder:validation:Optional
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Block List, Max: 1) Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available. (see below for nested schema)
	// Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.
	// +kubebuilder:validation:Optional
	WaitForSnapshot []WaitForSnapshotParameters `json:"waitForSnapshot,omitempty" tf:"wait_for_snapshot,omitempty"`
}

type ForcemergeInitParameters struct {

	// (String) Codec used to compress the document store.
	// Codec used to compress the document store.
	IndexCodec *string `json:"indexCodec,omitempty" tf:"index_codec,omitempty"`

	// (Number) Number of segments to merge to. To fully merge the index, set to 1.
	// Number of segments to merge to. To fully merge the index, set to 1.
	MaxNumSegments *float64 `json:"maxNumSegments,omitempty" tf:"max_num_segments,omitempty"`
}

type ForcemergeObservation struct {

	// (String) Codec used to compress the document store.
	// Codec used to compress the document store.
	IndexCodec *string `json:"indexCodec,omitempty" tf:"index_codec,omitempty"`

	// (Number) Number of segments to merge to. To fully merge the index, set to 1.
	// Number of segments to merge to. To fully merge the index, set to 1.
	MaxNumSegments *float64 `json:"maxNumSegments,omitempty" tf:"max_num_segments,omitempty"`
}

type ForcemergeParameters struct {

	// (String) Codec used to compress the document store.
	// Codec used to compress the document store.
	// +kubebuilder:validation:Optional
	IndexCodec *string `json:"indexCodec,omitempty" tf:"index_codec,omitempty"`

	// (Number) Number of segments to merge to. To fully merge the index, set to 1.
	// Number of segments to merge to. To fully merge the index, set to 1.
	// +kubebuilder:validation:Optional
	MaxNumSegments *float64 `json:"maxNumSegments" tf:"max_num_segments,omitempty"`
}

type FreezeInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM freezes the index.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type FreezeObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM freezes the index.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type FreezeParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM freezes the index.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type FrozenInitParameters struct {

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	SearchableSnapshot []FrozenSearchableSnapshotInitParameters `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`
}

type FrozenObservation struct {

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	SearchableSnapshot []FrozenSearchableSnapshotObservation `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`
}

type FrozenParameters struct {

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// +kubebuilder:validation:Optional
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	// +kubebuilder:validation:Optional
	SearchableSnapshot []FrozenSearchableSnapshotParameters `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`
}

type FrozenSearchableSnapshotInitParameters struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	SnapshotRepository *string `json:"snapshotRepository,omitempty" tf:"snapshot_repository,omitempty"`
}

type FrozenSearchableSnapshotObservation struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	SnapshotRepository *string `json:"snapshotRepository,omitempty" tf:"snapshot_repository,omitempty"`
}

type FrozenSearchableSnapshotParameters struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	// +kubebuilder:validation:Optional
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	// +kubebuilder:validation:Optional
	SnapshotRepository *string `json:"snapshotRepository" tf:"snapshot_repository,omitempty"`
}

type HotInitParameters struct {

	// only. (see below for nested schema)
	// Force merges the index into the specified maximum number of segments. This action makes the index read-only.
	Forcemerge []ForcemergeInitParameters `json:"forcemerge,omitempty" tf:"forcemerge,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	Readonly []HotReadonlyInitParameters `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (Block List, Max: 1) Rolls over a target to a new index when the existing index meets one or more of the rollover conditions. (see below for nested schema)
	// Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.
	Rollover []RolloverInitParameters `json:"rollover,omitempty" tf:"rollover,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	SearchableSnapshot []HotSearchableSnapshotInitParameters `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	SetPriority []HotSetPriorityInitParameters `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	Shrink []ShrinkInitParameters `json:"shrink,omitempty" tf:"shrink,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	Unfollow []HotUnfollowInitParameters `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type HotObservation struct {

	// only. (see below for nested schema)
	// Force merges the index into the specified maximum number of segments. This action makes the index read-only.
	Forcemerge []ForcemergeObservation `json:"forcemerge,omitempty" tf:"forcemerge,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	Readonly []HotReadonlyObservation `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (Block List, Max: 1) Rolls over a target to a new index when the existing index meets one or more of the rollover conditions. (see below for nested schema)
	// Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.
	Rollover []RolloverObservation `json:"rollover,omitempty" tf:"rollover,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	SearchableSnapshot []HotSearchableSnapshotObservation `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	SetPriority []HotSetPriorityObservation `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	Shrink []ShrinkObservation `json:"shrink,omitempty" tf:"shrink,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	Unfollow []HotUnfollowObservation `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type HotParameters struct {

	// only. (see below for nested schema)
	// Force merges the index into the specified maximum number of segments. This action makes the index read-only.
	// +kubebuilder:validation:Optional
	Forcemerge []ForcemergeParameters `json:"forcemerge,omitempty" tf:"forcemerge,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// +kubebuilder:validation:Optional
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	// +kubebuilder:validation:Optional
	Readonly []HotReadonlyParameters `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (Block List, Max: 1) Rolls over a target to a new index when the existing index meets one or more of the rollover conditions. (see below for nested schema)
	// Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.
	// +kubebuilder:validation:Optional
	Rollover []RolloverParameters `json:"rollover,omitempty" tf:"rollover,omitempty"`

	// (Block List, Max: 1) Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot. (see below for nested schema)
	// Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
	// +kubebuilder:validation:Optional
	SearchableSnapshot []HotSearchableSnapshotParameters `json:"searchableSnapshot,omitempty" tf:"searchable_snapshot,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	// +kubebuilder:validation:Optional
	SetPriority []HotSetPriorityParameters `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	// +kubebuilder:validation:Optional
	Shrink []ShrinkParameters `json:"shrink,omitempty" tf:"shrink,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	// +kubebuilder:validation:Optional
	Unfollow []HotUnfollowParameters `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type HotReadonlyInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type HotReadonlyObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type HotReadonlyParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type HotSearchableSnapshotInitParameters struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	SnapshotRepository *string `json:"snapshotRepository,omitempty" tf:"snapshot_repository,omitempty"`
}

type HotSearchableSnapshotObservation struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	SnapshotRepository *string `json:"snapshotRepository,omitempty" tf:"snapshot_repository,omitempty"`
}

type HotSearchableSnapshotParameters struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	// +kubebuilder:validation:Optional
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	// +kubebuilder:validation:Optional
	SnapshotRepository *string `json:"snapshotRepository" tf:"snapshot_repository,omitempty"`
}

type HotSetPriorityInitParameters struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type HotSetPriorityObservation struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type HotSetPriorityParameters struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority" tf:"priority,omitempty"`
}

type HotUnfollowInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type HotUnfollowObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type HotUnfollowParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type IndexLifecycleElasticsearchConnectionInitParameters struct {

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type IndexLifecycleElasticsearchConnectionObservation struct {

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type IndexLifecycleElasticsearchConnectionParameters struct {

	// (String, Sensitive) API Key to use for authentication to Elasticsearch
	// API Key to use for authentication to Elasticsearch
	// +kubebuilder:validation:Optional
	APIKeySecretRef *v1.SecretKeySelector `json:"apiKeySecretRef,omitempty" tf:"-"`

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointsSecretRef *[]v1.SecretKeySelector `json:"endpointsSecretRef,omitempty" tf:"-"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String, Sensitive) PEM encoded private key for client auth
	// PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyDataSecretRef *v1.SecretKeySelector `json:"keyDataSecretRef,omitempty" tf:"-"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String, Sensitive) Password to use for API authentication to Elasticsearch.
	// Password to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type IndexLifecycleInitParameters struct {

	// (Block List, Max: 1) The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower. (see below for nested schema)
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold []ColdInitParameters `json:"cold,omitempty" tf:"cold,omitempty"`

	// (Block List, Max: 1) The index is no longer needed and can safely be removed. (see below for nested schema)
	// The index is no longer needed and can safely be removed.
	Delete []DeleteInitParameters `json:"delete,omitempty" tf:"delete,omitempty"`

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []IndexLifecycleElasticsearchConnectionInitParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Block List, Max: 1) The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow. (see below for nested schema)
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen []FrozenInitParameters `json:"frozen,omitempty" tf:"frozen,omitempty"`

	// (Block List, Max: 1) The index is actively being updated and queried. (see below for nested schema)
	// The index is actively being updated and queried.
	Hot []HotInitParameters `json:"hot,omitempty" tf:"hot,omitempty"`

	// (String) Optional user metadata about the ilm policy. Must be valid JSON document.
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Identifier for the policy.
	// Identifier for the policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The index is no longer being updated but is still being queried. (see below for nested schema)
	// The index is no longer being updated but is still being queried.
	Warm []WarmInitParameters `json:"warm,omitempty" tf:"warm,omitempty"`
}

type IndexLifecycleObservation struct {

	// (Block List, Max: 1) The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower. (see below for nested schema)
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold []ColdObservation `json:"cold,omitempty" tf:"cold,omitempty"`

	// (Block List, Max: 1) The index is no longer needed and can safely be removed. (see below for nested schema)
	// The index is no longer needed and can safely be removed.
	Delete []DeleteObservation `json:"delete,omitempty" tf:"delete,omitempty"`

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []IndexLifecycleElasticsearchConnectionObservation `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Block List, Max: 1) The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow. (see below for nested schema)
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen []FrozenObservation `json:"frozen,omitempty" tf:"frozen,omitempty"`

	// (Block List, Max: 1) The index is actively being updated and queried. (see below for nested schema)
	// The index is actively being updated and queried.
	Hot []HotObservation `json:"hot,omitempty" tf:"hot,omitempty"`

	// (String) Internal identifier of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Optional user metadata about the ilm policy. Must be valid JSON document.
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The DateTime of the last modification.
	// The DateTime of the last modification.
	ModifiedDate *string `json:"modifiedDate,omitempty" tf:"modified_date,omitempty"`

	// (String) Identifier for the policy.
	// Identifier for the policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The index is no longer being updated but is still being queried. (see below for nested schema)
	// The index is no longer being updated but is still being queried.
	Warm []WarmObservation `json:"warm,omitempty" tf:"warm,omitempty"`
}

type IndexLifecycleParameters struct {

	// (Block List, Max: 1) The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower. (see below for nested schema)
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	// +kubebuilder:validation:Optional
	Cold []ColdParameters `json:"cold,omitempty" tf:"cold,omitempty"`

	// (Block List, Max: 1) The index is no longer needed and can safely be removed. (see below for nested schema)
	// The index is no longer needed and can safely be removed.
	// +kubebuilder:validation:Optional
	Delete []DeleteParameters `json:"delete,omitempty" tf:"delete,omitempty"`

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	// +kubebuilder:validation:Optional
	ElasticsearchConnection []IndexLifecycleElasticsearchConnectionParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Block List, Max: 1) The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow. (see below for nested schema)
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	// +kubebuilder:validation:Optional
	Frozen []FrozenParameters `json:"frozen,omitempty" tf:"frozen,omitempty"`

	// (Block List, Max: 1) The index is actively being updated and queried. (see below for nested schema)
	// The index is actively being updated and queried.
	// +kubebuilder:validation:Optional
	Hot []HotParameters `json:"hot,omitempty" tf:"hot,omitempty"`

	// (String) Optional user metadata about the ilm policy. Must be valid JSON document.
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Identifier for the policy.
	// Identifier for the policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The index is no longer being updated but is still being queried. (see below for nested schema)
	// The index is no longer being updated but is still being queried.
	// +kubebuilder:validation:Optional
	Warm []WarmParameters `json:"warm,omitempty" tf:"warm,omitempty"`
}

type MigrateInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM automatically migrates the index during this phase.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MigrateObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM automatically migrates the index during this phase.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MigrateParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM automatically migrates the index during this phase.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ReadonlyInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ReadonlyObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ReadonlyParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type RolloverInitParameters struct {

	// (String) Triggers rollover after the maximum elapsed time from index creation is reached.
	// Triggers rollover after the maximum elapsed time from index creation is reached.
	MaxAge *string `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	// (Number) Triggers rollover after the specified maximum number of documents is reached.
	// Triggers rollover after the specified maximum number of documents is reached.
	MaxDocs *float64 `json:"maxDocs,omitempty" tf:"max_docs,omitempty"`

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// Triggers rollover when the largest primary shard in the index reaches a certain size.
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (String) Triggers rollover when the index reaches a certain size.
	// Triggers rollover when the index reaches a certain size.
	MaxSize *string `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// Prevents rollover until after the minimum elapsed time from index creation is reached. Supported from Elasticsearch version **8.4**
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Number) Prevents rollover until after the specified minimum number of documents is reached. Supported from Elasticsearch version 8.4
	// Prevents rollover until after the specified minimum number of documents is reached. Supported from Elasticsearch version **8.4**
	MinDocs *float64 `json:"minDocs,omitempty" tf:"min_docs,omitempty"`

	// (Number) Prevents rollover until the largest primary shard in the index reaches a certain number of documents. Supported from Elasticsearch version 8.4
	// Prevents rollover until the largest primary shard in the index reaches a certain number of documents. Supported from Elasticsearch version **8.4**
	MinPrimaryShardDocs *float64 `json:"minPrimaryShardDocs,omitempty" tf:"min_primary_shard_docs,omitempty"`

	// (String) Prevents rollover until the largest primary shard in the index reaches a certain size. Supported from Elasticsearch version 8.4
	// Prevents rollover until the largest primary shard in the index reaches a certain size. Supported from Elasticsearch version **8.4**
	MinPrimaryShardSize *string `json:"minPrimaryShardSize,omitempty" tf:"min_primary_shard_size,omitempty"`

	// (String) Prevents rollover until the index reaches a certain size.
	// Prevents rollover until the index reaches a certain size.
	MinSize *string `json:"minSize,omitempty" tf:"min_size,omitempty"`
}

type RolloverObservation struct {

	// (String) Triggers rollover after the maximum elapsed time from index creation is reached.
	// Triggers rollover after the maximum elapsed time from index creation is reached.
	MaxAge *string `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	// (Number) Triggers rollover after the specified maximum number of documents is reached.
	// Triggers rollover after the specified maximum number of documents is reached.
	MaxDocs *float64 `json:"maxDocs,omitempty" tf:"max_docs,omitempty"`

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// Triggers rollover when the largest primary shard in the index reaches a certain size.
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (String) Triggers rollover when the index reaches a certain size.
	// Triggers rollover when the index reaches a certain size.
	MaxSize *string `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// Prevents rollover until after the minimum elapsed time from index creation is reached. Supported from Elasticsearch version **8.4**
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Number) Prevents rollover until after the specified minimum number of documents is reached. Supported from Elasticsearch version 8.4
	// Prevents rollover until after the specified minimum number of documents is reached. Supported from Elasticsearch version **8.4**
	MinDocs *float64 `json:"minDocs,omitempty" tf:"min_docs,omitempty"`

	// (Number) Prevents rollover until the largest primary shard in the index reaches a certain number of documents. Supported from Elasticsearch version 8.4
	// Prevents rollover until the largest primary shard in the index reaches a certain number of documents. Supported from Elasticsearch version **8.4**
	MinPrimaryShardDocs *float64 `json:"minPrimaryShardDocs,omitempty" tf:"min_primary_shard_docs,omitempty"`

	// (String) Prevents rollover until the largest primary shard in the index reaches a certain size. Supported from Elasticsearch version 8.4
	// Prevents rollover until the largest primary shard in the index reaches a certain size. Supported from Elasticsearch version **8.4**
	MinPrimaryShardSize *string `json:"minPrimaryShardSize,omitempty" tf:"min_primary_shard_size,omitempty"`

	// (String) Prevents rollover until the index reaches a certain size.
	// Prevents rollover until the index reaches a certain size.
	MinSize *string `json:"minSize,omitempty" tf:"min_size,omitempty"`
}

type RolloverParameters struct {

	// (String) Triggers rollover after the maximum elapsed time from index creation is reached.
	// Triggers rollover after the maximum elapsed time from index creation is reached.
	// +kubebuilder:validation:Optional
	MaxAge *string `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	// (Number) Triggers rollover after the specified maximum number of documents is reached.
	// Triggers rollover after the specified maximum number of documents is reached.
	// +kubebuilder:validation:Optional
	MaxDocs *float64 `json:"maxDocs,omitempty" tf:"max_docs,omitempty"`

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// Triggers rollover when the largest primary shard in the index reaches a certain size.
	// +kubebuilder:validation:Optional
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (String) Triggers rollover when the index reaches a certain size.
	// Triggers rollover when the index reaches a certain size.
	// +kubebuilder:validation:Optional
	MaxSize *string `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// Prevents rollover until after the minimum elapsed time from index creation is reached. Supported from Elasticsearch version **8.4**
	// +kubebuilder:validation:Optional
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// (Number) Prevents rollover until after the specified minimum number of documents is reached. Supported from Elasticsearch version 8.4
	// Prevents rollover until after the specified minimum number of documents is reached. Supported from Elasticsearch version **8.4**
	// +kubebuilder:validation:Optional
	MinDocs *float64 `json:"minDocs,omitempty" tf:"min_docs,omitempty"`

	// (Number) Prevents rollover until the largest primary shard in the index reaches a certain number of documents. Supported from Elasticsearch version 8.4
	// Prevents rollover until the largest primary shard in the index reaches a certain number of documents. Supported from Elasticsearch version **8.4**
	// +kubebuilder:validation:Optional
	MinPrimaryShardDocs *float64 `json:"minPrimaryShardDocs,omitempty" tf:"min_primary_shard_docs,omitempty"`

	// (String) Prevents rollover until the largest primary shard in the index reaches a certain size. Supported from Elasticsearch version 8.4
	// Prevents rollover until the largest primary shard in the index reaches a certain size. Supported from Elasticsearch version **8.4**
	// +kubebuilder:validation:Optional
	MinPrimaryShardSize *string `json:"minPrimaryShardSize,omitempty" tf:"min_primary_shard_size,omitempty"`

	// (String) Prevents rollover until the index reaches a certain size.
	// Prevents rollover until the index reaches a certain size.
	// +kubebuilder:validation:Optional
	MinSize *string `json:"minSize,omitempty" tf:"min_size,omitempty"`
}

type SearchableSnapshotInitParameters struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	SnapshotRepository *string `json:"snapshotRepository,omitempty" tf:"snapshot_repository,omitempty"`
}

type SearchableSnapshotObservation struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	SnapshotRepository *string `json:"snapshotRepository,omitempty" tf:"snapshot_repository,omitempty"`
}

type SearchableSnapshotParameters struct {

	// (Boolean) Force merges the managed index to one segment.
	// Force merges the managed index to one segment.
	// +kubebuilder:validation:Optional
	ForceMergeIndex *bool `json:"forceMergeIndex,omitempty" tf:"force_merge_index,omitempty"`

	// (String) Repository used to store the snapshot.
	// Repository used to store the snapshot.
	// +kubebuilder:validation:Optional
	SnapshotRepository *string `json:"snapshotRepository" tf:"snapshot_repository,omitempty"`
}

type SetPriorityInitParameters struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type SetPriorityObservation struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type SetPriorityParameters struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority" tf:"priority,omitempty"`
}

type ShrinkInitParameters struct {

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// The max primary shard size for the target index.
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (Number) Number of shards to shrink to.
	// Number of shards to shrink to.
	NumberOfShards *float64 `json:"numberOfShards,omitempty" tf:"number_of_shards,omitempty"`
}

type ShrinkObservation struct {

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// The max primary shard size for the target index.
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (Number) Number of shards to shrink to.
	// Number of shards to shrink to.
	NumberOfShards *float64 `json:"numberOfShards,omitempty" tf:"number_of_shards,omitempty"`
}

type ShrinkParameters struct {

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// The max primary shard size for the target index.
	// +kubebuilder:validation:Optional
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (Number) Number of shards to shrink to.
	// Number of shards to shrink to.
	// +kubebuilder:validation:Optional
	NumberOfShards *float64 `json:"numberOfShards,omitempty" tf:"number_of_shards,omitempty"`
}

type UnfollowInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type UnfollowObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type UnfollowParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WaitForSnapshotInitParameters struct {

	// (String) Name of the SLM policy that the delete action should wait for.
	// Name of the SLM policy that the delete action should wait for.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type WaitForSnapshotObservation struct {

	// (String) Name of the SLM policy that the delete action should wait for.
	// Name of the SLM policy that the delete action should wait for.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type WaitForSnapshotParameters struct {

	// (String) Name of the SLM policy that the delete action should wait for.
	// Name of the SLM policy that the delete action should wait for.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy" tf:"policy,omitempty"`
}

type WarmAllocateInitParameters struct {

	// (String) Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	Exclude *string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (String) Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	Include *string `json:"include,omitempty" tf:"include,omitempty"`

	// (Number) Number of replicas to assign to the index. Default: 0
	// Number of replicas to assign to the index. Default: `0`
	NumberOfReplicas *float64 `json:"numberOfReplicas,omitempty" tf:"number_of_replicas,omitempty"`

	// (String) Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	Require *string `json:"require,omitempty" tf:"require,omitempty"`

	// 1 (unlimited). Supported from Elasticsearch version 7.16
	// The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
	TotalShardsPerNode *float64 `json:"totalShardsPerNode,omitempty" tf:"total_shards_per_node,omitempty"`
}

type WarmAllocateObservation struct {

	// (String) Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	Exclude *string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (String) Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	Include *string `json:"include,omitempty" tf:"include,omitempty"`

	// (Number) Number of replicas to assign to the index. Default: 0
	// Number of replicas to assign to the index. Default: `0`
	NumberOfReplicas *float64 `json:"numberOfReplicas,omitempty" tf:"number_of_replicas,omitempty"`

	// (String) Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	Require *string `json:"require,omitempty" tf:"require,omitempty"`

	// 1 (unlimited). Supported from Elasticsearch version 7.16
	// The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
	TotalShardsPerNode *float64 `json:"totalShardsPerNode,omitempty" tf:"total_shards_per_node,omitempty"`
}

type WarmAllocateParameters struct {

	// (String) Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
	// +kubebuilder:validation:Optional
	Exclude *string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (String) Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
	// +kubebuilder:validation:Optional
	Include *string `json:"include,omitempty" tf:"include,omitempty"`

	// (Number) Number of replicas to assign to the index. Default: 0
	// Number of replicas to assign to the index. Default: `0`
	// +kubebuilder:validation:Optional
	NumberOfReplicas *float64 `json:"numberOfReplicas,omitempty" tf:"number_of_replicas,omitempty"`

	// (String) Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
	// +kubebuilder:validation:Optional
	Require *string `json:"require,omitempty" tf:"require,omitempty"`

	// 1 (unlimited). Supported from Elasticsearch version 7.16
	// The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
	// +kubebuilder:validation:Optional
	TotalShardsPerNode *float64 `json:"totalShardsPerNode,omitempty" tf:"total_shards_per_node,omitempty"`
}

type WarmForcemergeInitParameters struct {

	// (String) Codec used to compress the document store.
	// Codec used to compress the document store.
	IndexCodec *string `json:"indexCodec,omitempty" tf:"index_codec,omitempty"`

	// (Number) Number of segments to merge to. To fully merge the index, set to 1.
	// Number of segments to merge to. To fully merge the index, set to 1.
	MaxNumSegments *float64 `json:"maxNumSegments,omitempty" tf:"max_num_segments,omitempty"`
}

type WarmForcemergeObservation struct {

	// (String) Codec used to compress the document store.
	// Codec used to compress the document store.
	IndexCodec *string `json:"indexCodec,omitempty" tf:"index_codec,omitempty"`

	// (Number) Number of segments to merge to. To fully merge the index, set to 1.
	// Number of segments to merge to. To fully merge the index, set to 1.
	MaxNumSegments *float64 `json:"maxNumSegments,omitempty" tf:"max_num_segments,omitempty"`
}

type WarmForcemergeParameters struct {

	// (String) Codec used to compress the document store.
	// Codec used to compress the document store.
	// +kubebuilder:validation:Optional
	IndexCodec *string `json:"indexCodec,omitempty" tf:"index_codec,omitempty"`

	// (Number) Number of segments to merge to. To fully merge the index, set to 1.
	// Number of segments to merge to. To fully merge the index, set to 1.
	// +kubebuilder:validation:Optional
	MaxNumSegments *float64 `json:"maxNumSegments" tf:"max_num_segments,omitempty"`
}

type WarmInitParameters struct {

	// (Block List, Max: 1) Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas. (see below for nested schema)
	// Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
	Allocate []WarmAllocateInitParameters `json:"allocate,omitempty" tf:"allocate,omitempty"`

	// only. (see below for nested schema)
	// Force merges the index into the specified maximum number of segments. This action makes the index read-only.
	Forcemerge []WarmForcemergeInitParameters `json:"forcemerge,omitempty" tf:"forcemerge,omitempty"`

	// (Block List, Max: 1) Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting. (see below for nested schema)
	// Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
	Migrate []WarmMigrateInitParameters `json:"migrate,omitempty" tf:"migrate,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	Readonly []WarmReadonlyInitParameters `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	SetPriority []WarmSetPriorityInitParameters `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	Shrink []WarmShrinkInitParameters `json:"shrink,omitempty" tf:"shrink,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	Unfollow []WarmUnfollowInitParameters `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type WarmMigrateInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM automatically migrates the index during this phase.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmMigrateObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM automatically migrates the index during this phase.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmMigrateParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM automatically migrates the index during this phase.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmObservation struct {

	// (Block List, Max: 1) Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas. (see below for nested schema)
	// Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
	Allocate []WarmAllocateObservation `json:"allocate,omitempty" tf:"allocate,omitempty"`

	// only. (see below for nested schema)
	// Force merges the index into the specified maximum number of segments. This action makes the index read-only.
	Forcemerge []WarmForcemergeObservation `json:"forcemerge,omitempty" tf:"forcemerge,omitempty"`

	// (Block List, Max: 1) Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting. (see below for nested schema)
	// Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
	Migrate []WarmMigrateObservation `json:"migrate,omitempty" tf:"migrate,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	Readonly []WarmReadonlyObservation `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	SetPriority []WarmSetPriorityObservation `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	Shrink []WarmShrinkObservation `json:"shrink,omitempty" tf:"shrink,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	Unfollow []WarmUnfollowObservation `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type WarmParameters struct {

	// (Block List, Max: 1) Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas. (see below for nested schema)
	// Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
	// +kubebuilder:validation:Optional
	Allocate []WarmAllocateParameters `json:"allocate,omitempty" tf:"allocate,omitempty"`

	// only. (see below for nested schema)
	// Force merges the index into the specified maximum number of segments. This action makes the index read-only.
	// +kubebuilder:validation:Optional
	Forcemerge []WarmForcemergeParameters `json:"forcemerge,omitempty" tf:"forcemerge,omitempty"`

	// (Block List, Max: 1) Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting. (see below for nested schema)
	// Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
	// +kubebuilder:validation:Optional
	Migrate []WarmMigrateParameters `json:"migrate,omitempty" tf:"migrate,omitempty"`

	// (String) ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
	// +kubebuilder:validation:Optional
	MinAge *string `json:"minAge,omitempty" tf:"min_age,omitempty"`

	// only. (see below for nested schema)
	// Makes the index read-only.
	// +kubebuilder:validation:Optional
	Readonly []WarmReadonlyParameters `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	// +kubebuilder:validation:Optional
	SetPriority []WarmSetPriorityParameters `json:"setPriority,omitempty" tf:"set_priority,omitempty"`

	// only and shrinks it into a new index with fewer primary shards. (see below for nested schema)
	// Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
	// +kubebuilder:validation:Optional
	Shrink []WarmShrinkParameters `json:"shrink,omitempty" tf:"shrink,omitempty"`

	// (Block List, Max: 1) Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action. (see below for nested schema)
	// Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
	// +kubebuilder:validation:Optional
	Unfollow []WarmUnfollowParameters `json:"unfollow,omitempty" tf:"unfollow,omitempty"`
}

type WarmReadonlyInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmReadonlyObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmReadonlyParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the index read-only.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmSetPriorityInitParameters struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type WarmSetPriorityObservation struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type WarmSetPriorityParameters struct {

	// (Number) The priority for the index. Must be 0 or greater.
	// The priority for the index. Must be 0 or greater.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority" tf:"priority,omitempty"`
}

type WarmShrinkInitParameters struct {

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// The max primary shard size for the target index.
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (Number) Number of shards to shrink to.
	// Number of shards to shrink to.
	NumberOfShards *float64 `json:"numberOfShards,omitempty" tf:"number_of_shards,omitempty"`
}

type WarmShrinkObservation struct {

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// The max primary shard size for the target index.
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (Number) Number of shards to shrink to.
	// Number of shards to shrink to.
	NumberOfShards *float64 `json:"numberOfShards,omitempty" tf:"number_of_shards,omitempty"`
}

type WarmShrinkParameters struct {

	// (String) Triggers rollover when the largest primary shard in the index reaches a certain size.
	// The max primary shard size for the target index.
	// +kubebuilder:validation:Optional
	MaxPrimaryShardSize *string `json:"maxPrimaryShardSize,omitempty" tf:"max_primary_shard_size,omitempty"`

	// (Number) Number of shards to shrink to.
	// Number of shards to shrink to.
	// +kubebuilder:validation:Optional
	NumberOfShards *float64 `json:"numberOfShards,omitempty" tf:"number_of_shards,omitempty"`
}

type WarmUnfollowInitParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmUnfollowObservation struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WarmUnfollowParameters struct {

	// (Boolean) Controls whether ILM freezes the index.
	// Controls whether ILM makes the follower index a regular one.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

// IndexLifecycleSpec defines the desired state of IndexLifecycle
type IndexLifecycleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexLifecycleParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IndexLifecycleInitParameters `json:"initProvider,omitempty"`
}

// IndexLifecycleStatus defines the observed state of IndexLifecycle.
type IndexLifecycleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexLifecycleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IndexLifecycle is the Schema for the IndexLifecycles API. Creates or updates lifecycle policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticstack}
type IndexLifecycle struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   IndexLifecycleSpec   `json:"spec"`
	Status IndexLifecycleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexLifecycleList contains a list of IndexLifecycles
type IndexLifecycleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndexLifecycle `json:"items"`
}

// Repository type metadata.
var (
	IndexLifecycle_Kind             = "IndexLifecycle"
	IndexLifecycle_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndexLifecycle_Kind}.String()
	IndexLifecycle_KindAPIVersion   = IndexLifecycle_Kind + "." + CRDGroupVersion.String()
	IndexLifecycle_GroupVersionKind = CRDGroupVersion.WithKind(IndexLifecycle_Kind)
)

func init() {
	SchemeBuilder.Register(&IndexLifecycle{}, &IndexLifecycleList{})
}
