/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnapshotLifecycleElasticsearchConnectionInitParameters struct {

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SnapshotLifecycleElasticsearchConnectionObservation struct {

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SnapshotLifecycleElasticsearchConnectionParameters struct {

	// (String, Sensitive) API Key to use for authentication to Elasticsearch
	// API Key to use for authentication to Elasticsearch
	// +kubebuilder:validation:Optional
	APIKeySecretRef *v1.SecretKeySelector `json:"apiKeySecretRef,omitempty" tf:"-"`

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointsSecretRef *[]v1.SecretKeySelector `json:"endpointsSecretRef,omitempty" tf:"-"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String, Sensitive) PEM encoded private key for client auth
	// PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyDataSecretRef *v1.SecretKeySelector `json:"keyDataSecretRef,omitempty" tf:"-"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String, Sensitive) Password to use for API authentication to Elasticsearch.
	// Password to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SnapshotLifecycleInitParameters struct {

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []SnapshotLifecycleElasticsearchConnectionInitParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// separated values, such as closed,hidden.
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	ExpandWildcards *string `json:"expandWildcards,omitempty" tf:"expand_wildcards,omitempty"`

	// (String) Time period after which a snapshot is considered expired and eligible for deletion.
	// Time period after which a snapshot is considered expired and eligible for deletion.
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`

	// (Set of String) Feature states to include in the snapshot.
	// Feature states to include in the snapshot.
	FeatureStates []*string `json:"featureStates,omitempty" tf:"feature_states,omitempty"`

	// (Boolean) If false, the snapshot fails if any data stream or index in indices is missing or closed. If true, the snapshot ignores missing or closed data streams and indices.
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	IgnoreUnavailable *bool `json:"ignoreUnavailable,omitempty" tf:"ignore_unavailable,omitempty"`

	// (Boolean) If true, include the cluster state in the snapshot.
	// If `true`, include the cluster state in the snapshot.
	IncludeGlobalState *bool `json:"includeGlobalState,omitempty" tf:"include_global_state,omitempty"`

	// separated list of data streams and indices to include in the snapshot.
	// Comma-separated list of data streams and indices to include in the snapshot.
	Indices []*string `json:"indices,omitempty" tf:"indices,omitempty"`

	// (Number) Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	MaxCount *float64 `json:"maxCount,omitempty" tf:"max_count,omitempty"`

	// (String) Attaches arbitrary metadata to the snapshot.
	// Attaches arbitrary metadata to the snapshot.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Minimum number of snapshots to retain, even if the snapshots have expired.
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	MinCount *float64 `json:"minCount,omitempty" tf:"min_count,omitempty"`

	// (String) ID for the snapshot lifecycle policy you want to create or update.
	// ID for the snapshot lifecycle policy you want to create or update.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) If false, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	Partial *bool `json:"partial,omitempty" tf:"partial,omitempty"`

	// (String) Repository used to store snapshots created by this policy.
	// Repository used to store snapshots created by this policy.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// (String) Periodic or absolute schedule at which the policy creates snapshots.
	// Periodic or absolute schedule at which the policy creates snapshots.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) Name automatically assigned to each snapshot created by the policy.
	// Name automatically assigned to each snapshot created by the policy.
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`
}

type SnapshotLifecycleObservation struct {

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []SnapshotLifecycleElasticsearchConnectionObservation `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// separated values, such as closed,hidden.
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	ExpandWildcards *string `json:"expandWildcards,omitempty" tf:"expand_wildcards,omitempty"`

	// (String) Time period after which a snapshot is considered expired and eligible for deletion.
	// Time period after which a snapshot is considered expired and eligible for deletion.
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`

	// (Set of String) Feature states to include in the snapshot.
	// Feature states to include in the snapshot.
	FeatureStates []*string `json:"featureStates,omitempty" tf:"feature_states,omitempty"`

	// (String) Internal identifier of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) If false, the snapshot fails if any data stream or index in indices is missing or closed. If true, the snapshot ignores missing or closed data streams and indices.
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	IgnoreUnavailable *bool `json:"ignoreUnavailable,omitempty" tf:"ignore_unavailable,omitempty"`

	// (Boolean) If true, include the cluster state in the snapshot.
	// If `true`, include the cluster state in the snapshot.
	IncludeGlobalState *bool `json:"includeGlobalState,omitempty" tf:"include_global_state,omitempty"`

	// separated list of data streams and indices to include in the snapshot.
	// Comma-separated list of data streams and indices to include in the snapshot.
	Indices []*string `json:"indices,omitempty" tf:"indices,omitempty"`

	// (Number) Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	MaxCount *float64 `json:"maxCount,omitempty" tf:"max_count,omitempty"`

	// (String) Attaches arbitrary metadata to the snapshot.
	// Attaches arbitrary metadata to the snapshot.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Minimum number of snapshots to retain, even if the snapshots have expired.
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	MinCount *float64 `json:"minCount,omitempty" tf:"min_count,omitempty"`

	// (String) ID for the snapshot lifecycle policy you want to create or update.
	// ID for the snapshot lifecycle policy you want to create or update.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) If false, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	Partial *bool `json:"partial,omitempty" tf:"partial,omitempty"`

	// (String) Repository used to store snapshots created by this policy.
	// Repository used to store snapshots created by this policy.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// (String) Periodic or absolute schedule at which the policy creates snapshots.
	// Periodic or absolute schedule at which the policy creates snapshots.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) Name automatically assigned to each snapshot created by the policy.
	// Name automatically assigned to each snapshot created by the policy.
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`
}

type SnapshotLifecycleParameters struct {

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	// +kubebuilder:validation:Optional
	ElasticsearchConnection []SnapshotLifecycleElasticsearchConnectionParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// separated values, such as closed,hidden.
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	// +kubebuilder:validation:Optional
	ExpandWildcards *string `json:"expandWildcards,omitempty" tf:"expand_wildcards,omitempty"`

	// (String) Time period after which a snapshot is considered expired and eligible for deletion.
	// Time period after which a snapshot is considered expired and eligible for deletion.
	// +kubebuilder:validation:Optional
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`

	// (Set of String) Feature states to include in the snapshot.
	// Feature states to include in the snapshot.
	// +kubebuilder:validation:Optional
	FeatureStates []*string `json:"featureStates,omitempty" tf:"feature_states,omitempty"`

	// (Boolean) If false, the snapshot fails if any data stream or index in indices is missing or closed. If true, the snapshot ignores missing or closed data streams and indices.
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	// +kubebuilder:validation:Optional
	IgnoreUnavailable *bool `json:"ignoreUnavailable,omitempty" tf:"ignore_unavailable,omitempty"`

	// (Boolean) If true, include the cluster state in the snapshot.
	// If `true`, include the cluster state in the snapshot.
	// +kubebuilder:validation:Optional
	IncludeGlobalState *bool `json:"includeGlobalState,omitempty" tf:"include_global_state,omitempty"`

	// separated list of data streams and indices to include in the snapshot.
	// Comma-separated list of data streams and indices to include in the snapshot.
	// +kubebuilder:validation:Optional
	Indices []*string `json:"indices,omitempty" tf:"indices,omitempty"`

	// (Number) Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	// +kubebuilder:validation:Optional
	MaxCount *float64 `json:"maxCount,omitempty" tf:"max_count,omitempty"`

	// (String) Attaches arbitrary metadata to the snapshot.
	// Attaches arbitrary metadata to the snapshot.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Minimum number of snapshots to retain, even if the snapshots have expired.
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	// +kubebuilder:validation:Optional
	MinCount *float64 `json:"minCount,omitempty" tf:"min_count,omitempty"`

	// (String) ID for the snapshot lifecycle policy you want to create or update.
	// ID for the snapshot lifecycle policy you want to create or update.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) If false, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	// +kubebuilder:validation:Optional
	Partial *bool `json:"partial,omitempty" tf:"partial,omitempty"`

	// (String) Repository used to store snapshots created by this policy.
	// Repository used to store snapshots created by this policy.
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// (String) Periodic or absolute schedule at which the policy creates snapshots.
	// Periodic or absolute schedule at which the policy creates snapshots.
	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) Name automatically assigned to each snapshot created by the policy.
	// Name automatically assigned to each snapshot created by the policy.
	// +kubebuilder:validation:Optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`
}

// SnapshotLifecycleSpec defines the desired state of SnapshotLifecycle
type SnapshotLifecycleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotLifecycleParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnapshotLifecycleInitParameters `json:"initProvider,omitempty"`
}

// SnapshotLifecycleStatus defines the observed state of SnapshotLifecycle.
type SnapshotLifecycleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotLifecycleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotLifecycle is the Schema for the SnapshotLifecycles API. Creates or updates a snapshot lifecycle policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticstack}
type SnapshotLifecycle struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repository) || has(self.initProvider.repository)",message="repository is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedule) || has(self.initProvider.schedule)",message="schedule is a required parameter"
	Spec   SnapshotLifecycleSpec   `json:"spec"`
	Status SnapshotLifecycleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotLifecycleList contains a list of SnapshotLifecycles
type SnapshotLifecycleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotLifecycle `json:"items"`
}

// Repository type metadata.
var (
	SnapshotLifecycle_Kind             = "SnapshotLifecycle"
	SnapshotLifecycle_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotLifecycle_Kind}.String()
	SnapshotLifecycle_KindAPIVersion   = SnapshotLifecycle_Kind + "." + CRDGroupVersion.String()
	SnapshotLifecycle_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotLifecycle_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotLifecycle{}, &SnapshotLifecycleList{})
}
