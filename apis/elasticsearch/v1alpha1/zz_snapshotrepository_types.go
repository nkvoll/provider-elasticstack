/*
Copyright Elasticsearch B.V. All rights reserved.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureInitParameters struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path within the container to the repository data.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// Azure named client to use.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Container name. You must create the Azure container before creating the repository.
	// Container name. You must create the Azure container before creating the repository.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// us/azure/storage/common/storage-redundancy
	// Location mode. `primary_only` or `secondary_only`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
	LocationMode *string `json:"locationMode,omitempty" tf:"location_mode,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type AzureObservation struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path within the container to the repository data.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// Azure named client to use.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Container name. You must create the Azure container before creating the repository.
	// Container name. You must create the Azure container before creating the repository.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// us/azure/storage/common/storage-redundancy
	// Location mode. `primary_only` or `secondary_only`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
	LocationMode *string `json:"locationMode,omitempty" tf:"location_mode,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type AzureParameters struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path within the container to the repository data.
	// +kubebuilder:validation:Optional
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	// +kubebuilder:validation:Optional
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// Azure named client to use.
	// +kubebuilder:validation:Optional
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Container name. You must create the Azure container before creating the repository.
	// Container name. You must create the Azure container before creating the repository.
	// +kubebuilder:validation:Optional
	Container *string `json:"container" tf:"container,omitempty"`

	// us/azure/storage/common/storage-redundancy
	// Location mode. `primary_only` or `secondary_only`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
	// +kubebuilder:validation:Optional
	LocationMode *string `json:"locationMode,omitempty" tf:"location_mode,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	// +kubebuilder:validation:Optional
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	// +kubebuilder:validation:Optional
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type FsInitParameters struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Location of the shared filesystem used to store and retrieve snapshots.
	// Location of the shared filesystem used to store and retrieve snapshots.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (Number) Maximum number of snapshots the repository can contain.
	// Maximum number of snapshots the repository can contain.
	MaxNumberOfSnapshots *float64 `json:"maxNumberOfSnapshots,omitempty" tf:"max_number_of_snapshots,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type FsObservation struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Location of the shared filesystem used to store and retrieve snapshots.
	// Location of the shared filesystem used to store and retrieve snapshots.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (Number) Maximum number of snapshots the repository can contain.
	// Maximum number of snapshots the repository can contain.
	MaxNumberOfSnapshots *float64 `json:"maxNumberOfSnapshots,omitempty" tf:"max_number_of_snapshots,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type FsParameters struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	// +kubebuilder:validation:Optional
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Location of the shared filesystem used to store and retrieve snapshots.
	// Location of the shared filesystem used to store and retrieve snapshots.
	// +kubebuilder:validation:Optional
	Location *string `json:"location" tf:"location,omitempty"`

	// (Number) Maximum number of snapshots the repository can contain.
	// Maximum number of snapshots the repository can contain.
	// +kubebuilder:validation:Optional
	MaxNumberOfSnapshots *float64 `json:"maxNumberOfSnapshots,omitempty" tf:"max_number_of_snapshots,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	// +kubebuilder:validation:Optional
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	// +kubebuilder:validation:Optional
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type GcsInitParameters struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) The name of the bucket to be used for snapshots.
	// The name of the bucket to be used for snapshots.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// The name of the client to use to connect to Google Cloud Storage.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type GcsObservation struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) The name of the bucket to be used for snapshots.
	// The name of the bucket to be used for snapshots.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// The name of the client to use to connect to Google Cloud Storage.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type GcsParameters struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.
	// +kubebuilder:validation:Optional
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) The name of the bucket to be used for snapshots.
	// The name of the bucket to be used for snapshots.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	// +kubebuilder:validation:Optional
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// The name of the client to use to connect to Google Cloud Storage.
	// +kubebuilder:validation:Optional
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	// +kubebuilder:validation:Optional
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	// +kubebuilder:validation:Optional
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

type HdfsInitParameters struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (Boolean) Whether to load the default Hadoop configuration or not.
	// Whether to load the default Hadoop configuration or not.
	LoadDefaults *bool `json:"loadDefaults,omitempty" tf:"load_defaults,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// (String) The file path within the filesystem where data is stored/loaded.
	// The file path within the filesystem where data is stored/loaded.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (String) The uri address for hdfs. ex: "hdfs://:/".
	// The uri address for hdfs. ex: "hdfs://<host>:<port>/".
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type HdfsObservation struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (Boolean) Whether to load the default Hadoop configuration or not.
	// Whether to load the default Hadoop configuration or not.
	LoadDefaults *bool `json:"loadDefaults,omitempty" tf:"load_defaults,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// (String) The file path within the filesystem where data is stored/loaded.
	// The file path within the filesystem where data is stored/loaded.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (String) The uri address for hdfs. ex: "hdfs://:/".
	// The uri address for hdfs. ex: "hdfs://<host>:<port>/".
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type HdfsParameters struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	// +kubebuilder:validation:Optional
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (Boolean) Whether to load the default Hadoop configuration or not.
	// Whether to load the default Hadoop configuration or not.
	// +kubebuilder:validation:Optional
	LoadDefaults *bool `json:"loadDefaults,omitempty" tf:"load_defaults,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	// +kubebuilder:validation:Optional
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	// +kubebuilder:validation:Optional
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// (String) The file path within the filesystem where data is stored/loaded.
	// The file path within the filesystem where data is stored/loaded.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// only.
	// If true, the repository is read-only.
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// (String) The uri address for hdfs. ex: "hdfs://:/".
	// The uri address for hdfs. ex: "hdfs://<host>:<port>/".
	// +kubebuilder:validation:Optional
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type S3InitParameters struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path to the repository data within its bucket.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) The name of the bucket to be used for snapshots.
	// Name of the S3 bucket to use for snapshots.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) Minimum threshold below which the chunk is uploaded using a single request.
	// Minimum threshold below which the chunk is uploaded using a single request.
	BufferSize *string `json:"bufferSize,omitempty" tf:"buffer_size,omitempty"`

	// (String) The S3 repository supports all S3 canned ACLs.
	// The S3 repository supports all S3 canned ACLs.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// The name of the S3 client to use to connect to S3.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// (Boolean) If true, path style access pattern will be used.
	// If true, path style access pattern will be used.
	PathStyleAccess *bool `json:"pathStyleAccess,omitempty" tf:"path_style_access,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// side using AES-256 algorithm.
	// When true, files are encrypted server-side using AES-256 algorithm.
	ServerSideEncryption *bool `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// (String) Sets the S3 storage class for objects stored in the snapshot repository.
	// Sets the S3 storage class for objects stored in the snapshot repository.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type S3Observation struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path to the repository data within its bucket.
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) The name of the bucket to be used for snapshots.
	// Name of the S3 bucket to use for snapshots.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) Minimum threshold below which the chunk is uploaded using a single request.
	// Minimum threshold below which the chunk is uploaded using a single request.
	BufferSize *string `json:"bufferSize,omitempty" tf:"buffer_size,omitempty"`

	// (String) The S3 repository supports all S3 canned ACLs.
	// The S3 repository supports all S3 canned ACLs.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// The name of the S3 client to use to connect to S3.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// (Boolean) If true, path style access pattern will be used.
	// If true, path style access pattern will be used.
	PathStyleAccess *bool `json:"pathStyleAccess,omitempty" tf:"path_style_access,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// side using AES-256 algorithm.
	// When true, files are encrypted server-side using AES-256 algorithm.
	ServerSideEncryption *bool `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// (String) Sets the S3 storage class for objects stored in the snapshot repository.
	// Sets the S3 storage class for objects stored in the snapshot repository.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type S3Parameters struct {

	// (String) Specifies the path within the container to the repository data.
	// Specifies the path to the repository data within its bucket.
	// +kubebuilder:validation:Optional
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// (String) The name of the bucket to be used for snapshots.
	// Name of the S3 bucket to use for snapshots.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// (String) Minimum threshold below which the chunk is uploaded using a single request.
	// Minimum threshold below which the chunk is uploaded using a single request.
	// +kubebuilder:validation:Optional
	BufferSize *string `json:"bufferSize,omitempty" tf:"buffer_size,omitempty"`

	// (String) The S3 repository supports all S3 canned ACLs.
	// The S3 repository supports all S3 canned ACLs.
	// +kubebuilder:validation:Optional
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	// +kubebuilder:validation:Optional
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (String) Azure named client to use.
	// The name of the S3 client to use to connect to S3.
	// +kubebuilder:validation:Optional
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	// +kubebuilder:validation:Optional
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	// +kubebuilder:validation:Optional
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// (Boolean) If true, path style access pattern will be used.
	// If true, path style access pattern will be used.
	// +kubebuilder:validation:Optional
	PathStyleAccess *bool `json:"pathStyleAccess,omitempty" tf:"path_style_access,omitempty"`

	// only.
	// If true, the repository is read-only.
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// side using AES-256 algorithm.
	// When true, files are encrypted server-side using AES-256 algorithm.
	// +kubebuilder:validation:Optional
	ServerSideEncryption *bool `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// (String) Sets the S3 storage class for objects stored in the snapshot repository.
	// Sets the S3 storage class for objects stored in the snapshot repository.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type SnapshotRepositoryElasticsearchConnectionInitParameters struct {

	// (String, Sensitive) API Key to use for authentication to Elasticsearch
	// API Key to use for authentication to Elasticsearch
	APIKeySecretRef *v1.SecretKeySelector `json:"apiKeySecretRef,omitempty" tf:"-"`

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	Endpoints []*string `json:"endpointsSecretRef,omitempty" tf:"-"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String, Sensitive) PEM encoded private key for client auth
	// PEM encoded private key for client auth
	KeyDataSecretRef *v1.SecretKeySelector `json:"keyDataSecretRef,omitempty" tf:"-"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String, Sensitive) Password to use for API authentication to Elasticsearch.
	// Password to use for API authentication to Elasticsearch.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SnapshotRepositoryElasticsearchConnectionObservation struct {

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SnapshotRepositoryElasticsearchConnectionParameters struct {

	// (String, Sensitive) API Key to use for authentication to Elasticsearch
	// API Key to use for authentication to Elasticsearch
	// +kubebuilder:validation:Optional
	APIKeySecretRef *v1.SecretKeySelector `json:"apiKeySecretRef,omitempty" tf:"-"`

	// encoded custom Certificate Authority certificate
	// PEM-encoded custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAData *string `json:"caData,omitempty" tf:"ca_data,omitempty"`

	// (String) Path to a custom Certificate Authority certificate
	// Path to a custom Certificate Authority certificate
	// +kubebuilder:validation:Optional
	CAFile *string `json:"caFile,omitempty" tf:"ca_file,omitempty"`

	// (String) PEM encoded certificate for client auth
	// PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertData *string `json:"certData,omitempty" tf:"cert_data,omitempty"`

	// (String) Path to a file containing the PEM encoded certificate for client auth
	// Path to a file containing the PEM encoded certificate for client auth
	// +kubebuilder:validation:Optional
	CertFile *string `json:"certFile,omitempty" tf:"cert_file,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointsSecretRef *[]v1.SecretKeySelector `json:"endpointsSecretRef,omitempty" tf:"-"`

	// (Boolean) Disable TLS certificate validation
	// Disable TLS certificate validation
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String, Sensitive) PEM encoded private key for client auth
	// PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyDataSecretRef *v1.SecretKeySelector `json:"keyDataSecretRef,omitempty" tf:"-"`

	// (String) Path to a file containing the PEM encoded private key for client auth
	// Path to a file containing the PEM encoded private key for client auth
	// +kubebuilder:validation:Optional
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// (String, Sensitive) Password to use for API authentication to Elasticsearch.
	// Password to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Username to use for API authentication to Elasticsearch.
	// Username to use for API authentication to Elasticsearch.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SnapshotRepositoryInitParameters struct {

	// azure.html (see below for nested schema)
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure []AzureInitParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []SnapshotRepositoryElasticsearchConnectionInitParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Block List, Max: 1) Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster. (see below for nested schema)
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs []FsInitParameters `json:"fs,omitempty" tf:"fs,omitempty"`

	// gcs.html (see below for nested schema)
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs []GcsInitParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// hdfs.html (see below for nested schema)
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs []HdfsInitParameters `json:"hdfs,omitempty" tf:"hdfs,omitempty"`

	// (String) Name of the snapshot repository to register or update.
	// Name of the snapshot repository to register or update.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// s3-repository.html (see below for nested schema)
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 []S3InitParameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it. (see below for nested schema)
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	URL []URLInitParameters `json:"url,omitempty" tf:"url,omitempty"`

	// (Boolean) If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify *bool `json:"verify,omitempty" tf:"verify,omitempty"`
}

type SnapshotRepositoryObservation struct {

	// azure.html (see below for nested schema)
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure []AzureObservation `json:"azure,omitempty" tf:"azure,omitempty"`

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	ElasticsearchConnection []SnapshotRepositoryElasticsearchConnectionObservation `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Block List, Max: 1) Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster. (see below for nested schema)
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs []FsObservation `json:"fs,omitempty" tf:"fs,omitempty"`

	// gcs.html (see below for nested schema)
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs []GcsObservation `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// hdfs.html (see below for nested schema)
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs []HdfsObservation `json:"hdfs,omitempty" tf:"hdfs,omitempty"`

	// (String) Internal identifier of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the snapshot repository to register or update.
	// Name of the snapshot repository to register or update.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// s3-repository.html (see below for nested schema)
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 []S3Observation `json:"s3,omitempty" tf:"s3,omitempty"`

	// only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it. (see below for nested schema)
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	URL []URLObservation `json:"url,omitempty" tf:"url,omitempty"`

	// (Boolean) If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify *bool `json:"verify,omitempty" tf:"verify,omitempty"`
}

type SnapshotRepositoryParameters struct {

	// azure.html (see below for nested schema)
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	// +kubebuilder:validation:Optional
	Azure []AzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// (Block List, Max: 1, Deprecated) Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead. (see below for nested schema)
	// Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the Elasticsearch connection via the provider configuration instead.
	// +kubebuilder:validation:Optional
	ElasticsearchConnection []SnapshotRepositoryElasticsearchConnectionParameters `json:"elasticsearchConnection,omitempty" tf:"elasticsearch_connection,omitempty"`

	// (Block List, Max: 1) Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster. (see below for nested schema)
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	// +kubebuilder:validation:Optional
	Fs []FsParameters `json:"fs,omitempty" tf:"fs,omitempty"`

	// gcs.html (see below for nested schema)
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	// +kubebuilder:validation:Optional
	Gcs []GcsParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// hdfs.html (see below for nested schema)
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	// +kubebuilder:validation:Optional
	Hdfs []HdfsParameters `json:"hdfs,omitempty" tf:"hdfs,omitempty"`

	// (String) Name of the snapshot repository to register or update.
	// Name of the snapshot repository to register or update.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// s3-repository.html (see below for nested schema)
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	// +kubebuilder:validation:Optional
	S3 []S3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it. (see below for nested schema)
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	// +kubebuilder:validation:Optional
	URL []URLParameters `json:"url,omitempty" tf:"url,omitempty"`

	// (Boolean) If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	// +kubebuilder:validation:Optional
	Verify *bool `json:"verify,omitempty" tf:"verify,omitempty"`
}

type URLInitParameters struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (Number) Maximum number of retries for http and https URLs.
	// Maximum number of retries for http and https URLs.
	HTTPMaxRetries *float64 `json:"httpMaxRetries,omitempty" tf:"http_max_retries,omitempty"`

	// (String) Maximum wait time for data transfers over a connection.
	// Maximum wait time for data transfers over a connection.
	HTTPSocketTimeout *string `json:"httpSocketTimeout,omitempty" tf:"http_socket_timeout,omitempty"`

	// (Number) Maximum number of snapshots the repository can contain.
	// Maximum number of snapshots the repository can contain.
	MaxNumberOfSnapshots *float64 `json:"maxNumberOfSnapshots,omitempty" tf:"max_number_of_snapshots,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it. (see below for nested schema)
	// URL location of the root of the shared filesystem repository.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type URLObservation struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (Number) Maximum number of retries for http and https URLs.
	// Maximum number of retries for http and https URLs.
	HTTPMaxRetries *float64 `json:"httpMaxRetries,omitempty" tf:"http_max_retries,omitempty"`

	// (String) Maximum wait time for data transfers over a connection.
	// Maximum wait time for data transfers over a connection.
	HTTPSocketTimeout *string `json:"httpSocketTimeout,omitempty" tf:"http_socket_timeout,omitempty"`

	// (Number) Maximum number of snapshots the repository can contain.
	// Maximum number of snapshots the repository can contain.
	MaxNumberOfSnapshots *float64 `json:"maxNumberOfSnapshots,omitempty" tf:"max_number_of_snapshots,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it. (see below for nested schema)
	// URL location of the root of the shared filesystem repository.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type URLParameters struct {

	// (String) Maximum size of files in snapshots.
	// Maximum size of files in snapshots.
	// +kubebuilder:validation:Optional
	ChunkSize *string `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// (Boolean) If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// If true, metadata files, such as index mappings and settings, are compressed in snapshots.
	// +kubebuilder:validation:Optional
	Compress *bool `json:"compress,omitempty" tf:"compress,omitempty"`

	// (Number) Maximum number of retries for http and https URLs.
	// Maximum number of retries for http and https URLs.
	// +kubebuilder:validation:Optional
	HTTPMaxRetries *float64 `json:"httpMaxRetries,omitempty" tf:"http_max_retries,omitempty"`

	// (String) Maximum wait time for data transfers over a connection.
	// Maximum wait time for data transfers over a connection.
	// +kubebuilder:validation:Optional
	HTTPSocketTimeout *string `json:"httpSocketTimeout,omitempty" tf:"http_socket_timeout,omitempty"`

	// (Number) Maximum number of snapshots the repository can contain.
	// Maximum number of snapshots the repository can contain.
	// +kubebuilder:validation:Optional
	MaxNumberOfSnapshots *float64 `json:"maxNumberOfSnapshots,omitempty" tf:"max_number_of_snapshots,omitempty"`

	// (String) Maximum snapshot restore rate per node.
	// Maximum snapshot restore rate per node.
	// +kubebuilder:validation:Optional
	MaxRestoreBytesPerSec *string `json:"maxRestoreBytesPerSec,omitempty" tf:"max_restore_bytes_per_sec,omitempty"`

	// (String) Maximum snapshot creation rate per node.
	// Maximum snapshot creation rate per node.
	// +kubebuilder:validation:Optional
	MaxSnapshotBytesPerSec *string `json:"maxSnapshotBytesPerSec,omitempty" tf:"max_snapshot_bytes_per_sec,omitempty"`

	// only.
	// If true, the repository is read-only.
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it. (see below for nested schema)
	// URL location of the root of the shared filesystem repository.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

// SnapshotRepositorySpec defines the desired state of SnapshotRepository
type SnapshotRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotRepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnapshotRepositoryInitParameters `json:"initProvider,omitempty"`
}

// SnapshotRepositoryStatus defines the observed state of SnapshotRepository.
type SnapshotRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SnapshotRepository is the Schema for the SnapshotRepositorys API. Registers or updates a snapshot repository.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticstack}
type SnapshotRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SnapshotRepositorySpec   `json:"spec"`
	Status SnapshotRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotRepositoryList contains a list of SnapshotRepositorys
type SnapshotRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotRepository `json:"items"`
}

// Repository type metadata.
var (
	SnapshotRepository_Kind             = "SnapshotRepository"
	SnapshotRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotRepository_Kind}.String()
	SnapshotRepository_KindAPIVersion   = SnapshotRepository_Kind + "." + CRDGroupVersion.String()
	SnapshotRepository_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotRepository{}, &SnapshotRepositoryList{})
}
