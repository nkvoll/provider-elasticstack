/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WatchInitParameters struct {

	// (String) The list of actions that will be run if the condition matches.
	// The list of actions that will be run if the condition matches.
	Actions *string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active by default.
	// Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active by default.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The condition that defines if the actions should be run.
	// The condition that defines if the actions should be run.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (String) The input that defines the input that loads the data for the watch.
	// The input that defines the input that loads the data for the watch.
	Input *string `json:"input,omitempty" tf:"input,omitempty"`

	// (String) Metadata json that will be copied into the history entries.
	// Metadata json that will be copied into the history entries.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Minimum time in milliseconds between actions being run. Defaults to 5000.
	// Minimum time in milliseconds between actions being run. Defaults to 5000.
	ThrottlePeriodInMillis *float64 `json:"throttlePeriodInMillis,omitempty" tf:"throttle_period_in_millis,omitempty"`

	// (String) Processes the watch payload to prepare it for the watch actions.
	// Processes the watch payload to prepare it for the watch actions.
	Transform *string `json:"transform,omitempty" tf:"transform,omitempty"`

	// (String) The trigger that defines when the watch should run.
	// The trigger that defines when the watch should run.
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// (String) Identifier for the watch.
	// Identifier for the watch.
	WatchID *string `json:"watchId,omitempty" tf:"watch_id,omitempty"`
}

type WatchObservation struct {

	// (String) The list of actions that will be run if the condition matches.
	// The list of actions that will be run if the condition matches.
	Actions *string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active by default.
	// Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active by default.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The condition that defines if the actions should be run.
	// The condition that defines if the actions should be run.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (String) Internal identifier of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The input that defines the input that loads the data for the watch.
	// The input that defines the input that loads the data for the watch.
	Input *string `json:"input,omitempty" tf:"input,omitempty"`

	// (String) Metadata json that will be copied into the history entries.
	// Metadata json that will be copied into the history entries.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Minimum time in milliseconds between actions being run. Defaults to 5000.
	// Minimum time in milliseconds between actions being run. Defaults to 5000.
	ThrottlePeriodInMillis *float64 `json:"throttlePeriodInMillis,omitempty" tf:"throttle_period_in_millis,omitempty"`

	// (String) Processes the watch payload to prepare it for the watch actions.
	// Processes the watch payload to prepare it for the watch actions.
	Transform *string `json:"transform,omitempty" tf:"transform,omitempty"`

	// (String) The trigger that defines when the watch should run.
	// The trigger that defines when the watch should run.
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// (String) Identifier for the watch.
	// Identifier for the watch.
	WatchID *string `json:"watchId,omitempty" tf:"watch_id,omitempty"`
}

type WatchParameters struct {

	// (String) The list of actions that will be run if the condition matches.
	// The list of actions that will be run if the condition matches.
	// +kubebuilder:validation:Optional
	Actions *string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active by default.
	// Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active by default.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The condition that defines if the actions should be run.
	// The condition that defines if the actions should be run.
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (String) The input that defines the input that loads the data for the watch.
	// The input that defines the input that loads the data for the watch.
	// +kubebuilder:validation:Optional
	Input *string `json:"input,omitempty" tf:"input,omitempty"`

	// (String) Metadata json that will be copied into the history entries.
	// Metadata json that will be copied into the history entries.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Minimum time in milliseconds between actions being run. Defaults to 5000.
	// Minimum time in milliseconds between actions being run. Defaults to 5000.
	// +kubebuilder:validation:Optional
	ThrottlePeriodInMillis *float64 `json:"throttlePeriodInMillis,omitempty" tf:"throttle_period_in_millis,omitempty"`

	// (String) Processes the watch payload to prepare it for the watch actions.
	// Processes the watch payload to prepare it for the watch actions.
	// +kubebuilder:validation:Optional
	Transform *string `json:"transform,omitempty" tf:"transform,omitempty"`

	// (String) The trigger that defines when the watch should run.
	// The trigger that defines when the watch should run.
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// (String) Identifier for the watch.
	// Identifier for the watch.
	// +kubebuilder:validation:Optional
	WatchID *string `json:"watchId,omitempty" tf:"watch_id,omitempty"`
}

// WatchSpec defines the desired state of Watch
type WatchSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WatchParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WatchInitParameters `json:"initProvider,omitempty"`
}

// WatchStatus defines the observed state of Watch.
type WatchStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WatchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Watch is the Schema for the Watchs API. Adds and manages a Watch.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticstack}
type Watch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trigger) || has(self.initProvider.trigger)",message="trigger is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.watchId) || has(self.initProvider.watchId)",message="watchId is a required parameter"
	Spec   WatchSpec   `json:"spec"`
	Status WatchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WatchList contains a list of Watchs
type WatchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Watch `json:"items"`
}

// Repository type metadata.
var (
	Watch_Kind             = "Watch"
	Watch_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Watch_Kind}.String()
	Watch_KindAPIVersion   = Watch_Kind + "." + CRDGroupVersion.String()
	Watch_GroupVersionKind = CRDGroupVersion.WithKind(Watch_Kind)
)

func init() {
	SchemeBuilder.Register(&Watch{}, &WatchList{})
}
