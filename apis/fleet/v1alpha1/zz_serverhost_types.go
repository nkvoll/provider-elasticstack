/*
Copyright Elasticsearch B.V. All rights reserved.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerHostInitParameters struct {

	// (Boolean) Set as default.
	// Set as default.
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Unique identifier of the Fleet server host.
	// Unique identifier of the Fleet server host.
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// (List of String) A list of hosts.
	// A list of hosts.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) The name of the Fleet server host.
	// The name of the Fleet server host.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ServerHostObservation struct {

	// (Boolean) Set as default.
	// Set as default.
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Unique identifier of the Fleet server host.
	// Unique identifier of the Fleet server host.
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// (List of String) A list of hosts.
	// A list of hosts.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the Fleet server host.
	// The name of the Fleet server host.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ServerHostParameters struct {

	// (Boolean) Set as default.
	// Set as default.
	// +kubebuilder:validation:Optional
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Unique identifier of the Fleet server host.
	// Unique identifier of the Fleet server host.
	// +kubebuilder:validation:Optional
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// (List of String) A list of hosts.
	// A list of hosts.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) The name of the Fleet server host.
	// The name of the Fleet server host.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// ServerHostSpec defines the desired state of ServerHost
type ServerHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerHostParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerHostInitParameters `json:"initProvider,omitempty"`
}

// ServerHostStatus defines the observed state of ServerHost.
type ServerHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerHost is the Schema for the ServerHosts API. Creates or updates a Fleet Server Host.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticstack}
type ServerHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hosts) || has(self.initProvider.hosts)",message="hosts is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   ServerHostSpec   `json:"spec"`
	Status ServerHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerHostList contains a list of ServerHosts
type ServerHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerHost `json:"items"`
}

// Repository type metadata.
var (
	ServerHost_Kind             = "ServerHost"
	ServerHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerHost_Kind}.String()
	ServerHost_KindAPIVersion   = ServerHost_Kind + "." + CRDGroupVersion.String()
	ServerHost_GroupVersionKind = CRDGroupVersion.WithKind(ServerHost_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerHost{}, &ServerHostList{})
}
