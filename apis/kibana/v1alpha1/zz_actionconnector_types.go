/*
Copyright Elasticsearch B.V. All rights reserved.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionConnectorInitParameters struct {

	// (String) The configuration for the connector. Configuration properties vary depending on the connector type.
	// The configuration for the connector. Configuration properties vary depending on the connector type.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// (String) A UUID v1 or v4 to use instead of a randomly generated ID.
	// A UUID v1 or v4 to use instead of a randomly generated ID.
	ConnectorID *string `json:"connectorId,omitempty" tf:"connector_id,omitempty"`

	// (String) The ID of the connector type, e.g. .index.
	// The ID of the connector type, e.g. `.index`.
	ConnectorTypeID *string `json:"connectorTypeId,omitempty" tf:"connector_type_id,omitempty"`

	// (String) The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a connector.
	// The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a connector.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type.
	// The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type.
	SecretsSecretRef *v1.SecretKeySelector `json:"secretsSecretRef,omitempty" tf:"-"`

	// (String) An identifier for the space. If space_id is not provided, the default space is used.
	// An identifier for the space. If space_id is not provided, the default space is used.
	// +crossplane:generate:reference:type=github.com/elastic/provider-elasticstack/apis/kibana/v1alpha1.Space
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("space_id",true)
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in kibana to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in kibana to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`
}

type ActionConnectorObservation struct {

	// (String) The configuration for the connector. Configuration properties vary depending on the connector type.
	// The configuration for the connector. Configuration properties vary depending on the connector type.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// (String) A UUID v1 or v4 to use instead of a randomly generated ID.
	// A UUID v1 or v4 to use instead of a randomly generated ID.
	ConnectorID *string `json:"connectorId,omitempty" tf:"connector_id,omitempty"`

	// (String) The ID of the connector type, e.g. .index.
	// The ID of the connector type, e.g. `.index`.
	ConnectorTypeID *string `json:"connectorTypeId,omitempty" tf:"connector_type_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether the connector type is deprecated.
	// Indicates whether the connector type is deprecated.
	IsDeprecated *bool `json:"isDeprecated,omitempty" tf:"is_deprecated,omitempty"`

	// (Boolean) Indicates whether secrets are missing for the connector.
	// Indicates whether secrets are missing for the connector.
	IsMissingSecrets *bool `json:"isMissingSecrets,omitempty" tf:"is_missing_secrets,omitempty"`

	// (Boolean) Indicates whether it is a preconfigured connector.
	// Indicates whether it is a preconfigured connector.
	IsPreconfigured *bool `json:"isPreconfigured,omitempty" tf:"is_preconfigured,omitempty"`

	// (String) The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a connector.
	// The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a connector.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) An identifier for the space. If space_id is not provided, the default space is used.
	// An identifier for the space. If space_id is not provided, the default space is used.
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`
}

type ActionConnectorParameters struct {

	// (String) The configuration for the connector. Configuration properties vary depending on the connector type.
	// The configuration for the connector. Configuration properties vary depending on the connector type.
	// +kubebuilder:validation:Optional
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// (String) A UUID v1 or v4 to use instead of a randomly generated ID.
	// A UUID v1 or v4 to use instead of a randomly generated ID.
	// +kubebuilder:validation:Optional
	ConnectorID *string `json:"connectorId,omitempty" tf:"connector_id,omitempty"`

	// (String) The ID of the connector type, e.g. .index.
	// The ID of the connector type, e.g. `.index`.
	// +kubebuilder:validation:Optional
	ConnectorTypeID *string `json:"connectorTypeId,omitempty" tf:"connector_type_id,omitempty"`

	// (String) The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a connector.
	// The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a connector.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type.
	// The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type.
	// +kubebuilder:validation:Optional
	SecretsSecretRef *v1.SecretKeySelector `json:"secretsSecretRef,omitempty" tf:"-"`

	// (String) An identifier for the space. If space_id is not provided, the default space is used.
	// An identifier for the space. If space_id is not provided, the default space is used.
	// +crossplane:generate:reference:type=github.com/elastic/provider-elasticstack/apis/kibana/v1alpha1.Space
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("space_id",true)
	// +kubebuilder:validation:Optional
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in kibana to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in kibana to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`
}

// ActionConnectorSpec defines the desired state of ActionConnector
type ActionConnectorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActionConnectorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActionConnectorInitParameters `json:"initProvider,omitempty"`
}

// ActionConnectorStatus defines the observed state of ActionConnector.
type ActionConnectorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActionConnectorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ActionConnector is the Schema for the ActionConnectors API. Creates or updates a Kibana action connector. See https://www.elastic.co/guide/en/kibana/current/action-types.html
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticstack}
type ActionConnector struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectorTypeId) || (has(self.initProvider) && has(self.initProvider.connectorTypeId))",message="spec.forProvider.connectorTypeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ActionConnectorSpec   `json:"spec"`
	Status ActionConnectorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActionConnectorList contains a list of ActionConnectors
type ActionConnectorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActionConnector `json:"items"`
}

// Repository type metadata.
var (
	ActionConnector_Kind             = "ActionConnector"
	ActionConnector_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActionConnector_Kind}.String()
	ActionConnector_KindAPIVersion   = ActionConnector_Kind + "." + CRDGroupVersion.String()
	ActionConnector_GroupVersionKind = CRDGroupVersion.WithKind(ActionConnector_Kind)
)

func init() {
	SchemeBuilder.Register(&ActionConnector{}, &ActionConnectorList{})
}
